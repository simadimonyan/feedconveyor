# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  bot:
    build:
      context: .
    container_name: telegram-bot
    ports:
      - 8080:8080
    extra_hosts:
      - "host.docker.internal:host-gateway"
    develop:
      watch:
        - action: sync
          path: ./src
          target: /src
          ignore:
            - node_modules/
        - action: rebuild 
          path: requirements.txt
    # depends_on:
    #   - ollama
    # networks:
    #   - local-network
  # ollama:
  #   image: ollama/ollama:latest
  #   restart: always
  #   container_name: ollama-ai
  #   expose:
  #     - 11434
  #   ports:
  #     - "11434:11434"
  #   deploy:
  #       resources:
  #           limits:
  #             cpus: '2'
  #             memory: 16G
  #   volumes:
  #     - ./dockervolumes/ollama:/root/.ollama
  #     - .:/ollamascript
  #   entrypoint: ["/usr/bin/bash", "/ollamascript/ollamascript.sh"]
  #   networks:
  #     - local-network

networks:
  local-network:
    driver: bridge

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

